{"ast":null,"code":"/** @format */\n\nexport const validateFirstName = (fname, setFormErrors) => {\n  if (fname.length < 3) {\n    setFormErrors(\"firstName\", \"first name must have at least 3 characters\");\n  } else {\n    setFormErrors(\"firstName\", \"\");\n    return true;\n  }\n};\nexport const validateLastName = (lname, setFormErrors) => {\n  if (lname.length < 3) {\n    setFormErrors(\"lastName\", \"last name must have at least 3 characters\");\n  } else {\n    setFormErrors(\"lastName\", \"\");\n    return true;\n  }\n};\nfunction isLetter(c) {\n  return c.toLowerCase() !== c.toUpperCase();\n}\nfunction isNumber(n) {\n  return !isNaN(n);\n}\nexport const validateUserName = (username, setFormErrors) => {\n  // Liczba znak贸w numerycznych w 'username'.\n  let numbersCount = 0;\n\n  // Liczba znak贸w specjalnych w 'username'.\n  let containsSpecialChars = false;\n  for (let letter of username) {\n    if (isNumber(letter)) {\n      numbersCount++;\n      continue;\n    }\n    if (isLetter(letter)) {\n      continue;\n    }\n    containsSpecialChars = true;\n    break;\n  }\n  if (username.length > 10) {\n    setFormErrors(\"userName\", \"usernmae is too long must be max 10 characters\");\n    return false;\n  }\n  if (containsSpecialChars) {\n    setFormErrors(\"userName\", \"username cannot contain special characters\");\n    return false;\n  }\n  if (numbersCount < 2) {\n    setFormErrors(\"userName\", \"username must contain at least 2 numbers\");\n    return false;\n  }\n  setFormErrors(\"userName\", \"\");\n  return true;\n};\nexport const validateEmail = (email, setFormErrors) => {\n  if (!new RegExp(/\\S+@\\S+\\.\\S+/).test(email)) {\n    setFormErrors(\"email\", \"invalid email\");\n  } else {\n    setFormErrors(\"email\", \"\");\n    return true;\n  }\n};\n\n// export const validateAvatar = (avatar, setFormErrors) => {\n//   if (avatar === \"\") {\n//     setFormErrors(\"avatar\", \"avatar is missing\");\n//   } else {\n//     setFormErrors(\"avatar\", \"\");\n//     return true;\n//   }\n// };","map":{"version":3,"names":["validateFirstName","fname","setFormErrors","length","validateLastName","lname","isLetter","c","toLowerCase","toUpperCase","isNumber","n","isNaN","validateUserName","username","numbersCount","containsSpecialChars","letter","validateEmail","email","RegExp","test"],"sources":["/Users/martyna.kiljan/Documents/projects/crrud/crud-app/src/utilis/validateInput.js"],"sourcesContent":["/** @format */\n\nexport const validateFirstName = (fname, setFormErrors) => {\n  if (fname.length < 3) {\n    setFormErrors(\"firstName\", \"first name must have at least 3 characters\");\n  } else {\n    setFormErrors(\"firstName\", \"\");\n    return true;\n  }\n};\n\nexport const validateLastName = (lname, setFormErrors) => {\n  if (lname.length < 3) {\n    setFormErrors(\"lastName\", \"last name must have at least 3 characters\");\n  } else {\n    setFormErrors(\"lastName\", \"\");\n    return true;\n  }\n};\n\nfunction isLetter(c) {\n  return c.toLowerCase() !== c.toUpperCase();\n}\n\nfunction isNumber(n) {\n  return !isNaN(n);\n}\n\nexport const validateUserName = (username, setFormErrors) => {\n  // Liczba znak贸w numerycznych w 'username'.\n  let numbersCount = 0;\n\n  // Liczba znak贸w specjalnych w 'username'.\n  let containsSpecialChars = false;\n\n  for (let letter of username) {\n    if (isNumber(letter)) {\n      numbersCount++;\n      continue;\n    }\n\n    if (isLetter(letter)) {\n      continue;\n    }\n\n    containsSpecialChars = true;\n    break;\n  }\n\n  if (username.length > 10) {\n    setFormErrors(\"userName\", \"usernmae is too long must be max 10 characters\");\n    return false;\n  }\n\n  if (containsSpecialChars) {\n    setFormErrors(\"userName\", \"username cannot contain special characters\");\n    return false;\n  }\n\n  if (numbersCount < 2) {\n    setFormErrors(\"userName\", \"username must contain at least 2 numbers\");\n    return false;\n  }\n  setFormErrors(\"userName\", \"\");\n  return true;\n};\n\nexport const validateEmail = (email, setFormErrors) => {\n  if (!new RegExp(/\\S+@\\S+\\.\\S+/).test(email)) {\n    setFormErrors(\"email\", \"invalid email\");\n  } else {\n    setFormErrors(\"email\", \"\");\n    return true;\n  }\n};\n\n// export const validateAvatar = (avatar, setFormErrors) => {\n//   if (avatar === \"\") {\n//     setFormErrors(\"avatar\", \"avatar is missing\");\n//   } else {\n//     setFormErrors(\"avatar\", \"\");\n//     return true;\n//   }\n// };\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,KAAK,EAAEC,aAAa,KAAK;EACzD,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACpBD,aAAa,CAAC,WAAW,EAAE,4CAA4C,CAAC;EAC1E,CAAC,MAAM;IACLA,aAAa,CAAC,WAAW,EAAE,EAAE,CAAC;IAC9B,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,CAACC,KAAK,EAAEH,aAAa,KAAK;EACxD,IAAIG,KAAK,CAACF,MAAM,GAAG,CAAC,EAAE;IACpBD,aAAa,CAAC,UAAU,EAAE,2CAA2C,CAAC;EACxE,CAAC,MAAM;IACLA,aAAa,CAAC,UAAU,EAAE,EAAE,CAAC;IAC7B,OAAO,IAAI;EACb;AACF,CAAC;AAED,SAASI,QAAQ,CAACC,CAAC,EAAE;EACnB,OAAOA,CAAC,CAACC,WAAW,EAAE,KAAKD,CAAC,CAACE,WAAW,EAAE;AAC5C;AAEA,SAASC,QAAQ,CAACC,CAAC,EAAE;EACnB,OAAO,CAACC,KAAK,CAACD,CAAC,CAAC;AAClB;AAEA,OAAO,MAAME,gBAAgB,GAAG,CAACC,QAAQ,EAAEZ,aAAa,KAAK;EAC3D;EACA,IAAIa,YAAY,GAAG,CAAC;;EAEpB;EACA,IAAIC,oBAAoB,GAAG,KAAK;EAEhC,KAAK,IAAIC,MAAM,IAAIH,QAAQ,EAAE;IAC3B,IAAIJ,QAAQ,CAACO,MAAM,CAAC,EAAE;MACpBF,YAAY,EAAE;MACd;IACF;IAEA,IAAIT,QAAQ,CAACW,MAAM,CAAC,EAAE;MACpB;IACF;IAEAD,oBAAoB,GAAG,IAAI;IAC3B;EACF;EAEA,IAAIF,QAAQ,CAACX,MAAM,GAAG,EAAE,EAAE;IACxBD,aAAa,CAAC,UAAU,EAAE,gDAAgD,CAAC;IAC3E,OAAO,KAAK;EACd;EAEA,IAAIc,oBAAoB,EAAE;IACxBd,aAAa,CAAC,UAAU,EAAE,4CAA4C,CAAC;IACvE,OAAO,KAAK;EACd;EAEA,IAAIa,YAAY,GAAG,CAAC,EAAE;IACpBb,aAAa,CAAC,UAAU,EAAE,0CAA0C,CAAC;IACrE,OAAO,KAAK;EACd;EACAA,aAAa,CAAC,UAAU,EAAE,EAAE,CAAC;EAC7B,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMgB,aAAa,GAAG,CAACC,KAAK,EAAEjB,aAAa,KAAK;EACrD,IAAI,CAAC,IAAIkB,MAAM,CAAC,cAAc,CAAC,CAACC,IAAI,CAACF,KAAK,CAAC,EAAE;IAC3CjB,aAAa,CAAC,OAAO,EAAE,eAAe,CAAC;EACzC,CAAC,MAAM;IACLA,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;IAC1B,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}